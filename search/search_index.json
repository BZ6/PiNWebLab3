{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome GitHub Repository","title":"Home"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#github","text":"Repository","title":"GitHub"},{"location":"task1/","text":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2 \u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043d\u044b\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0440\u0430\u0437 \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 1, \u0442\u0430\u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0442\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u044f\u043c, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0437\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0437\u0434\u0435\u0441\u044c \u043c\u044b \u043d\u0435 \u0433\u043e\u043d\u0438\u043c\u0441\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, HTTPException, status from pydantic import BaseModel import requests from src.parse_and_save import parse_and_save from src.connection import init_db app = FastAPI() class ParseRequest(BaseModel): url: str @app.on_event(\"startup\") def on_startup(): init_db() @app.post(\"/parse\") def parse(request: ParseRequest): try: response = requests.get(request.url) response.raise_for_status() parse_and_save(request.url) return {\"message\": \"Parsing completed\"} except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Dockerfile: \u0417\u0434\u0435\u0441\u044c \u044f \u0440\u0435\u0448\u0438\u043b \u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0437\u044b \u0432 docker-compose. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430: services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web volumes: postgres-data:","title":"Task 1"},{"location":"task1/#1-fastapi-docker","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2 \u041f\u0430\u0440\u0441\u0435\u0440 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043d\u044b\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0440\u0430\u0437 \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 1, \u0442\u0430\u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e, \u0442\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u044f\u043c, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0437\u0430 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\u044e \u0437\u0434\u0435\u0441\u044c \u043c\u044b \u043d\u0435 \u0433\u043e\u043d\u0438\u043c\u0441\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, HTTPException, status from pydantic import BaseModel import requests from src.parse_and_save import parse_and_save from src.connection import init_db app = FastAPI() class ParseRequest(BaseModel): url: str @app.on_event(\"startup\") def on_startup(): init_db() @app.post(\"/parse\") def parse(request: ParseRequest): try: response = requests.get(request.url) response.raise_for_status() parse_and_save(request.url) return {\"message\": \"Parsing completed\"} except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Dockerfile: \u0417\u0434\u0435\u0441\u044c \u044f \u0440\u0435\u0448\u0438\u043b \u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0437\u044b \u0432 docker-compose. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430: services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web volumes: postgres-data:","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker"},{"location":"task2/","text":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. from fastapi import APIRouter, HTTPException, status import requests router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") def parse_site(url: str): try: response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json() except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0422\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0445\u043e\u0441\u0442\u0430 \u0432 URL, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c docker-compose, \u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0442\u044c \u0438 \u0442\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (parser). \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u0443\u0434\u0443 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0442\u0438 \u0432 docker-compose, \u0445\u043e\u0442\u044f \u043e\u043d\u0438 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0438 \u0431\u0435\u0437 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u0435\u0442\u044c.","title":"Task 2"},{"location":"task2/#2-fastapi","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. from fastapi import APIRouter, HTTPException, status import requests router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") def parse_site(url: str): try: response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json() except requests.RequestException as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0422\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0445\u043e\u0441\u0442\u0430 \u0432 URL, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c docker-compose, \u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0442\u044c \u0438 \u0442\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (parser). \u0412 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0431\u0443\u0434\u0443 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0442\u0438 \u0432 docker-compose, \u0445\u043e\u0442\u044f \u043e\u043d\u0438 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0438 \u0431\u0435\u0437 \u043c\u0435\u043d\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u0435\u0442\u044c.","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI"},{"location":"task3/","text":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Redis \u0438 \u0421elery pip install redis celery \u0421elery config \u041f\u0438\u0448\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433 \u0434\u043b\u044f \u0421elery. \u041d\u0430\u0434\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c include=['src.task'] , \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0430\u0447\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0443, \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0434\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (sheduler). from celery import Celery app = Celery('sheduler', broker='redis://redis:6379/0', backend='redis://redis:6379/0', include=['src.task']) app.conf.update( result_expires=3600, task_serializer='json', accept_content=['application/json'], result_serializer='json', timezone='UTC', enable_utc=True, ) if __name__ == '__main__': app.start() \u0421elery task \u041f\u0438\u0448\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 Celery, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043d\u0435\u0441 \u0441\u044e\u0434\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. import requests from src.celery_config import app @app.task def parse_url(url: str): response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json() Docker compose \u041c\u0435\u043d\u044f\u0435\u043c docker-compose.yml . \u0417\u0430\u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0435\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0431\u044b \u0431\u044b\u043b\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0441\u0435\u0440\u0432\u0438\u0441\u044b celery-worker \u0438 redis . services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data networks: - sheduler-network redis: image: redis:latest container_name: redis ports: - \"6379:6379\" networks: - sheduler-network sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser - redis networks: - sheduler-network parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web networks: - sheduler-network celery-worker: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && celery -A src.celery_config worker --loglevel=info\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt depends_on: - redis - postgres-web networks: - sheduler-network networks: sheduler-network: volumes: postgres-data: Parser endpoint \u041f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043d\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439. \u0422\u0443\u0442 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b \u0438 \u043e\u0442\u043e\u0448\u0435\u043b \u043e\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043d\u043e \u043c\u043d\u0435 \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0432\u0438\u0434\u0435\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0438\u0439\u0441\u044f, \u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u044f \u043d\u0435 \u0445\u043e\u0442\u0435\u043b. \u0423 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0432\u0435\u0442 task.id, \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0442\u043e\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u043e \u0432 \u0441\u0438\u043b\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u043d\u0435 \u0442\u0430\u043a \u043f\u043b\u043e\u0445\u043e. from fastapi import APIRouter, HTTPException, status from celery.result import AsyncResult from asyncio import sleep from src.task import parse_url router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") async def parse_site(url: str): try: task = parse_url.apply_async((url,)) result = AsyncResult(task.id) # \u041d\u0435 \u0445\u043e\u0447\u0443 \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 # \u0442\u0430\u0441\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0443\u0441\u0442\u044c \u0442\u0430\u0441\u043a\u0430 \u043f\u043e\u0441\u043f\u0438\u0442 \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u0435\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u044c while not result.ready(): await sleep(1) if not result.successful(): raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=result.result) return result.result except Exception as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e)) \u0412\u044b\u0432\u043e\u0434 \u0421\u0430\u043c\u044b\u043c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u044d\u0442\u043e \u0441\u0435\u0442\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 docker compose, \u0430 \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043d\u0435\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u0437\u0430\u043c\u044b\u0441\u043b\u043e\u0432\u0430\u0442\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443, \u0438 Celery, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u0447\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"Task 3"},{"location":"task3/#3-fastapi","text":"\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Redis \u0438 \u0421elery pip install redis celery","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c"},{"location":"task3/#elery-config","text":"\u041f\u0438\u0448\u0435\u043c \u043a\u043e\u043d\u0444\u0438\u0433 \u0434\u043b\u044f \u0421elery. \u041d\u0430\u0434\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c include=['src.task'] , \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0430\u0447\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0443, \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u0434\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0430\u043a\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430 (sheduler). from celery import Celery app = Celery('sheduler', broker='redis://redis:6379/0', backend='redis://redis:6379/0', include=['src.task']) app.conf.update( result_expires=3600, task_serializer='json', accept_content=['application/json'], result_serializer='json', timezone='UTC', enable_utc=True, ) if __name__ == '__main__': app.start()","title":"\u0421elery config"},{"location":"task3/#elery-task","text":"\u041f\u0438\u0448\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 Celery, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043d\u0435\u0441 \u0441\u044e\u0434\u0430 \u043b\u043e\u0433\u0438\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430. import requests from src.celery_config import app @app.task def parse_url(url: str): response = requests.post(\"http://parser:8000/parse\", json={\"url\": url}) response.raise_for_status() return response.json()","title":"\u0421elery task"},{"location":"task3/#docker-compose","text":"\u041c\u0435\u043d\u044f\u0435\u043c docker-compose.yml . \u0417\u0430\u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0435\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0431\u044b \u0431\u044b\u043b\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0441\u0435\u0440\u0432\u0438\u0441\u044b celery-worker \u0438 redis . services: postgres-web: image: postgres:latest container_name: postgres-web hostname: postgres ports: - \"5432:5432\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} volumes: - postgres-data:/var/lib/postgresql/data networks: - sheduler-network redis: image: redis:latest container_name: redis ports: - \"6379:6379\" networks: - sheduler-network sheduler: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /sheduler/data /sheduler/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt ports: - \"8002:8000\" depends_on: - postgres-web - parser - redis networks: - sheduler-network parser: image: python:3.12 working_dir: /parser command: > sh -c \"cp /tmp/parser/requirements.txt . && pip install --no-cache-dir -r requirements.txt && mkdir -p /parser/data /parser/logs && uvicorn src.main:app --reload --workers 1 --host 0.0.0.0 --port 8000\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres volumes: - ./parser/src/:/parser/src/ - ./parser/requirements.txt:/tmp/parser/requirements.txt ports: - \"8003:8000\" depends_on: - postgres-web networks: - sheduler-network celery-worker: image: python:3.12 working_dir: /sheduler command: > sh -c \"cp /tmp/sheduler/requirements.txt . && pip install --no-cache-dir -r requirements.txt && celery -A src.celery_config worker --loglevel=info\" environment: POSTGRES_USER: ${POSTGRES_USER} POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} POSTGRES_DB: ${POSTGRES_DB} POSTGRES_HOST: postgres REDIS_HOST: redis volumes: - ./sheduler/src/:/sheduler/src/ - ./sheduler/requirements.txt:/tmp/sheduler/requirements.txt depends_on: - redis - postgres-web networks: - sheduler-network networks: sheduler-network: volumes: postgres-data:","title":"Docker compose"},{"location":"task3/#parser-endpoint","text":"\u041f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043d\u0430 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439. \u0422\u0443\u0442 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u044f \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b \u0438 \u043e\u0442\u043e\u0448\u0435\u043b \u043e\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043d\u043e \u043c\u043d\u0435 \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0432\u0438\u0434\u0435\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0438\u0439\u0441\u044f, \u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u044f \u043d\u0435 \u0445\u043e\u0442\u0435\u043b. \u0423 \u043c\u0435\u043d\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0442\u0432\u0435\u0442 task.id, \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0442\u043e\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u043e \u0432 \u0441\u0438\u043b\u0443 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0435 \u043d\u0435 \u0442\u0430\u043a \u043f\u043b\u043e\u0445\u043e. from fastapi import APIRouter, HTTPException, status from celery.result import AsyncResult from asyncio import sleep from src.task import parse_url router = APIRouter(prefix=\"/parser\", tags=[\"parser\"]) @router.post(\"/\") async def parse_site(url: str): try: task = parse_url.apply_async((url,)) result = AsyncResult(task.id) # \u041d\u0435 \u0445\u043e\u0447\u0443 \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 # \u0442\u0430\u0441\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0443\u0441\u0442\u044c \u0442\u0430\u0441\u043a\u0430 \u043f\u043e\u0441\u043f\u0438\u0442 \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u0435\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u044c while not result.ready(): await sleep(1) if not result.successful(): raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=result.result) return result.result except Exception as e: raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))","title":"Parser endpoint"},{"location":"task3/#_1","text":"\u0421\u0430\u043c\u044b\u043c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u044d\u0442\u043e \u0441\u0435\u0442\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 docker compose, \u0430 \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043d\u0435\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u0437\u0430\u043c\u044b\u0441\u043b\u043e\u0432\u0430\u0442\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443, \u0438 Celery, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0434\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443, \u0447\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u0412\u044b\u0432\u043e\u0434"}]}